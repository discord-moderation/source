{
  "meta": {
    "generator": "0.11.1",
    "format": 22,
    "date": 1629467494156
  },
  "custom": {
    "general": {
      "name": "General",
      "files": {
        "welcome": {
          "name": "Welcome",
          "type": "md",
          "content": "<img src=\"https://raw.githubusercontent.com/bad-boy-discord/discord-moderation/main/assets/discord-moderation-main.png\" />\r\n<hr>\r\n\r\n**Development process will start in middle of August.**\r\n",
          "path": "README.MD"
        }
      }
    }
  },
  "classes": [
    {
      "name": "Base",
      "description": "Base class that uses in all other classes.",
      "access": "private",
      "methods": [
        {
          "name": "on",
          "description": "Handles all the Events",
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "once",
          "description": "Handles all the Events",
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "emit",
          "description": "Emits any Event",
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "boolean"
              ]
            ]
          ],
          "meta": {
            "line": 43,
            "file": "Base.ts",
            "path": "src/classes"
          }
        }
      ],
      "meta": {
        "line": 6,
        "file": "Base.ts",
        "path": "src/classes"
      }
    },
    {
      "name": "Logger",
      "description": "Logger Class",
      "methods": [
        {
          "name": "log",
          "description": "Logging Something",
          "params": [
            {
              "name": "message",
              "description": "Message to Log",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "void"
              ]
            ]
          ],
          "meta": {
            "line": 32,
            "file": "Logger.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "warn",
          "description": "Logging Something",
          "params": [
            {
              "name": "message",
              "description": "Message to Log",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "void"
              ]
            ]
          ],
          "meta": {
            "line": 32,
            "file": "Logger.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "error",
          "description": "Logging Something",
          "params": [
            {
              "name": "message",
              "description": "Message to Log",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "void"
              ]
            ]
          ],
          "meta": {
            "line": 32,
            "file": "Logger.ts",
            "path": "src/classes"
          }
        }
      ],
      "meta": {
        "line": 3,
        "file": "Logger.ts",
        "path": "src/classes"
      }
    },
    {
      "name": "Moderation",
      "description": "Class that enables Moderation System",
      "extends": [
        [
          [
            "Base"
          ]
        ]
      ],
      "construct": {
        "name": "Moderation",
        "params": [
          {
            "name": "client",
            "description": "Discord.JS Client",
            "type": [
              [
                [
                  "Client"
                ]
              ]
            ]
          },
          {
            "name": "options",
            "description": "Module Options",
            "type": [
              [
                [
                  "Options"
                ]
              ]
            ]
          }
        ]
      },
      "props": [
        {
          "name": "client",
          "description": "Discord Client",
          "type": [
            [
              [
                "Client"
              ]
            ]
          ],
          "meta": {
            "line": 42,
            "file": "Moderation.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "options",
          "description": "Module Options",
          "type": [
            [
              [
                "Options"
              ]
            ]
          ],
          "meta": {
            "line": 48,
            "file": "Moderation.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "mutes",
          "description": "MuteManager Class",
          "type": [
            [
              [
                "MuteManager"
              ]
            ]
          ],
          "meta": {
            "line": 54,
            "file": "Moderation.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "warns",
          "description": "WarnManager Class",
          "type": [
            [
              [
                "WarnManager"
              ]
            ]
          ],
          "meta": {
            "line": 60,
            "file": "Moderation.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "utils",
          "description": "Module Utils",
          "type": [
            [
              [
                "Utils"
              ]
            ]
          ],
          "meta": {
            "line": 66,
            "file": "Moderation.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "isReady",
          "description": "Module Ready State",
          "type": [
            [
              [
                "boolean"
              ]
            ]
          ],
          "meta": {
            "line": 72,
            "file": "Moderation.ts",
            "path": "src/classes"
          }
        }
      ],
      "methods": [
        {
          "name": "mute",
          "description": "Method that Mutes or Temp Mutes Member",
          "emits": [
            "Moderation#event:muteMember"
          ],
          "params": [
            {
              "name": "type",
              "description": "Type of the Mute",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            },
            {
              "name": "message",
              "description": "Discord Message",
              "type": [
                [
                  [
                    "Message"
                  ]
                ]
              ]
            },
            {
              "name": "member",
              "description": "Member to Mute",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            },
            {
              "name": "reason",
              "description": "Reason of the Mute",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            },
            {
              "name": "time",
              "description": "Time of the Temp Mute",
              "type": [
                [
                  [
                    "number"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "MutesData",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 89,
            "file": "Moderation.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "unmute",
          "description": "Method that unmutes Member",
          "emits": [
            "Moderation#event:unmuteMember"
          ],
          "params": [
            {
              "name": "member",
              "description": "Member for Mute",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "MutesData",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 128,
            "file": "Moderation.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "warn",
          "description": "Method that warns Member",
          "emits": [
            "Moderation#event:warnAdd",
            "Moderation#event:warnKick"
          ],
          "params": [
            {
              "name": "message",
              "description": "Discord Message",
              "type": [
                [
                  [
                    "Message"
                  ]
                ]
              ]
            },
            {
              "name": "member",
              "description": "Member for Warn",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            },
            {
              "name": "reason",
              "description": "Reaon of the Warn",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "WarnsData",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 150,
            "file": "Moderation.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "unwarn",
          "description": "Method that removes last warn from Member",
          "emits": [
            "Moderation#event:warnRemove"
          ],
          "params": [
            {
              "name": "member",
              "description": "Member for Warn",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "WarnsData",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 187,
            "file": "Moderation.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "allWarns",
          "description": "Method that removes last warn from Member",
          "params": [
            {
              "name": "member",
              "description": "Member for Warn",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "Array",
                "<"
              ],
              [
                "WarnsData",
                ">|"
              ],
              [
                "undefined",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 209,
            "file": "Moderation.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "on",
          "description": "Handles all the Events",
          "inherits": "Base#on",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "once",
          "description": "Handles all the Events",
          "inherits": "Base#once",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "emit",
          "description": "Emits any Event",
          "inherits": "Base#emit",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "boolean"
              ]
            ]
          ],
          "meta": {
            "line": 43,
            "file": "Base.ts",
            "path": "src/classes"
          }
        }
      ],
      "meta": {
        "line": 25,
        "file": "Moderation.ts",
        "path": "src/classes"
      }
    },
    {
      "name": "MuteManager",
      "description": "Class that Handles/Creates/Removes Mutes",
      "extends": [
        [
          [
            "Base"
          ]
        ]
      ],
      "construct": {
        "name": "MuteManager",
        "params": [
          {
            "name": "client",
            "description": "Discord.JS Client",
            "type": [
              [
                [
                  "Client"
                ]
              ]
            ]
          },
          {
            "name": "options",
            "description": "Module Options",
            "type": [
              [
                [
                  "Options"
                ]
              ]
            ]
          }
        ]
      },
      "props": [
        {
          "name": "client",
          "description": "Discord Client",
          "type": [
            [
              [
                "Client"
              ]
            ]
          ],
          "meta": {
            "line": 36,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "options",
          "description": "Module Options",
          "type": [
            [
              [
                "Options"
              ]
            ]
          ],
          "meta": {
            "line": 42,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "logger",
          "description": "Module Logger",
          "type": [
            [
              [
                "Logger"
              ]
            ]
          ],
          "meta": {
            "line": 48,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "utils",
          "description": "Module Utils",
          "type": [
            [
              [
                "Utils"
              ]
            ]
          ],
          "meta": {
            "line": 54,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        }
      ],
      "methods": [
        {
          "name": "setRole",
          "description": "This method sets Mute Role.",
          "params": [
            {
              "name": "guild",
              "description": "Discord Guild",
              "type": [
                [
                  [
                    "Guild"
                  ]
                ]
              ]
            },
            {
              "name": "role",
              "description": "Discord Role",
              "type": [
                [
                  [
                    "Role"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 61,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "getRole",
          "description": "This method getting Mute Role.",
          "params": [
            {
              "name": "guild",
              "description": "Discord Guild",
              "type": [
                [
                  [
                    "Guild"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 100,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "getMute",
          "description": "Method that finds Mute in Storage",
          "params": [
            {
              "name": "member",
              "description": "Discord Member",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "MutesData",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 135,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "create",
          "description": "This is method that mutes member.",
          "params": [
            {
              "name": "type",
              "description": "Mute Type",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            },
            {
              "name": "message",
              "description": "Message",
              "type": [
                [
                  [
                    "Message"
                  ]
                ]
              ]
            },
            {
              "name": "member",
              "description": "Discord Guild Member",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            },
            {
              "name": "reason",
              "description": "Reason of the Mute",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            },
            {
              "name": "time",
              "description": "Time of Temp Mute",
              "type": [
                [
                  [
                    "number"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "MutesData",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 156,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "delete",
          "description": "Method that removes Mute from Member",
          "emits": [
            "Moderation#event:unmuteMember"
          ],
          "params": [
            {
              "name": "message",
              "description": "Discord Message",
              "type": [
                [
                  [
                    "Message"
                  ]
                ]
              ]
            },
            {
              "name": "member",
              "description": "Discord Member",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "MutesData",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 285,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "handleUtilsMute",
          "description": "Private method that will handle Mute",
          "emits": [
            "Moderation#event:muteMember"
          ],
          "params": [
            {
              "name": "guild",
              "description": "Discord Guild",
              "type": [
                [
                  [
                    "Guild"
                  ]
                ]
              ]
            },
            {
              "name": "member",
              "description": "Guild Member",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            },
            {
              "name": "time",
              "description": "Time of the Mute",
              "type": [
                [
                  [
                    "number"
                  ]
                ]
              ]
            },
            {
              "name": "muteData",
              "description": "Mute Data",
              "type": [
                [
                  [
                    "MutesData"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "null",
                "|"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 332,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "handleMute",
          "description": "Private method that will handle Mute",
          "emits": [
            "Moderation#event:unmuteMember"
          ],
          "params": [
            {
              "name": "guild",
              "description": "Discord Guild",
              "type": [
                [
                  [
                    "Guild"
                  ]
                ]
              ]
            },
            {
              "name": "member",
              "description": "Guild Member",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            },
            {
              "name": "time",
              "description": "Time of the Mute",
              "type": [
                [
                  [
                    "number"
                  ]
                ]
              ]
            },
            {
              "name": "muteData",
              "description": "Mute Data",
              "type": [
                [
                  [
                    "MutesData"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "null",
                "|"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 376,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "on",
          "description": "Handles all the Events",
          "inherits": "Base#on",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "once",
          "description": "Handles all the Events",
          "inherits": "Base#once",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "emit",
          "description": "Emits any Event",
          "inherits": "Base#emit",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "boolean"
              ]
            ]
          ],
          "meta": {
            "line": 43,
            "file": "Base.ts",
            "path": "src/classes"
          }
        }
      ],
      "meta": {
        "line": 19,
        "file": "MuteManager.ts",
        "path": "src/classes"
      }
    },
    {
      "name": "Utils",
      "description": "Class that including some methods.",
      "extends": [
        [
          [
            "Base"
          ]
        ]
      ],
      "construct": {
        "name": "Utils",
        "params": [
          {
            "name": "client",
            "description": "Discord.JS Client",
            "type": [
              [
                [
                  "Client"
                ]
              ]
            ]
          },
          {
            "name": "options",
            "description": "Module Options",
            "type": [
              [
                [
                  "Options"
                ]
              ]
            ]
          }
        ]
      },
      "props": [
        {
          "name": "client",
          "description": "Discord Client",
          "type": [
            [
              [
                "Client"
              ]
            ]
          ],
          "meta": {
            "line": 37,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "mutes",
          "description": "Mute Manager",
          "type": [
            [
              [
                "MuteManager"
              ]
            ]
          ],
          "meta": {
            "line": 43,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "options",
          "description": "Module Options",
          "type": [
            [
              [
                "Options"
              ]
            ]
          ],
          "meta": {
            "line": 49,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "logger",
          "description": "Module Logger",
          "type": [
            [
              [
                "Logger"
              ]
            ]
          ],
          "meta": {
            "line": 55,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        }
      ],
      "methods": [
        {
          "name": "checkMute",
          "description": "Method that will be used when Member joins Server",
          "params": [
            {
              "name": "member",
              "description": "Discord Member",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 62,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "getGuild",
          "description": "Method that will return Guild Data",
          "params": [
            {
              "name": "guild",
              "description": "Discord Guild",
              "type": [
                [
                  [
                    "Guild"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "GuilData",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 86,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "createGuild",
          "description": "Method that created Guild Data",
          "params": [
            {
              "name": "guild",
              "description": "Discord Guild",
              "type": [
                [
                  [
                    "Guild"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 126,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "setData",
          "description": "Method that changes data in Storage",
          "params": [
            {
              "name": "guild",
              "description": "Discord Guild",
              "type": [
                [
                  [
                    "Guild"
                  ]
                ]
              ]
            },
            {
              "name": "newData",
              "description": "New Guild Data",
              "type": [
                [
                  [
                    "GuildData"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 193,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "checkFile",
          "description": "Method that will check Storage File every 5 seconds",
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 231,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "checkMutes",
          "description": "Method that checks mutes when client is ready",
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 265,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "wait",
          "description": "Method that create Timeout with Promise",
          "params": [
            {
              "name": "ms",
              "description": "Milliseconds",
              "type": [
                [
                  [
                    "number"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "unknown",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 387,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "on",
          "description": "Handles all the Events",
          "inherits": "Base#on",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "once",
          "description": "Handles all the Events",
          "inherits": "Base#once",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "emit",
          "description": "Emits any Event",
          "inherits": "Base#emit",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "boolean"
              ]
            ]
          ],
          "meta": {
            "line": 43,
            "file": "Base.ts",
            "path": "src/classes"
          }
        }
      ],
      "meta": {
        "line": 19,
        "file": "Utils.ts",
        "path": "src/classes"
      }
    },
    {
      "name": "WarnManager",
      "description": "Class that Handles/Creates/Removes Warns",
      "extends": [
        [
          [
            "Base"
          ]
        ]
      ],
      "construct": {
        "name": "WarnManager",
        "params": [
          {
            "name": "client",
            "description": "Discord.JS Client",
            "type": [
              [
                [
                  "Client"
                ]
              ]
            ]
          },
          {
            "name": "options",
            "description": "Module Options",
            "type": [
              [
                [
                  "Options"
                ]
              ]
            ]
          }
        ]
      },
      "methods": [
        {
          "name": "getWarn",
          "description": "Get last Member Warn",
          "params": [
            {
              "name": "member",
              "description": "Discord Member",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "WarnsData",
                "|"
              ],
              [
                "null",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 43,
            "file": "WarnManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "create",
          "description": "Method that creates Warn.",
          "emits": [
            "Moderation#event:warnAdd",
            "Moderation#event:warnKick"
          ],
          "params": [
            {
              "name": "message",
              "description": "Discord Message",
              "type": [
                [
                  [
                    "Message"
                  ]
                ]
              ]
            },
            {
              "name": "member",
              "description": "Discord Member",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            },
            {
              "name": "reason",
              "description": "Warn Reason",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "WarnsData",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 66,
            "file": "WarnManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "delete",
          "description": "Method that removes last warn from member",
          "emits": [
            "Moderation#event:warnRemove"
          ],
          "params": [
            {
              "name": "member",
              "description": "Discord Member",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "WarnsData",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 132,
            "file": "WarnManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "all",
          "description": "Method that returns all member warns",
          "params": [
            {
              "name": "member",
              "description": "Discord Member",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "Array",
                "<"
              ],
              [
                "WarnsData",
                ">|"
              ],
              [
                "null",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 171,
            "file": "WarnManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "on",
          "description": "Handles all the Events",
          "inherits": "Base#on",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "once",
          "description": "Handles all the Events",
          "inherits": "Base#once",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "emit",
          "description": "Emits any Event",
          "inherits": "Base#emit",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "boolean"
              ]
            ]
          ],
          "meta": {
            "line": 43,
            "file": "Base.ts",
            "path": "src/classes"
          }
        }
      ],
      "meta": {
        "line": 17,
        "file": "WarnManager.ts",
        "path": "src/classes"
      }
    }
  ],
  "interfaces": [],
  "typedefs": [
    {
      "name": "Options",
      "description": "Module Options",
      "type": [
        [
          [
            "Object"
          ]
        ]
      ],
      "props": [
        {
          "name": "storageType",
          "description": "Storage Type (Json or SQLite)",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "storagePath",
          "description": "Storage Path (Only for Json type)",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        }
      ],
      "meta": {
        "line": 55,
        "file": "Base.ts",
        "path": "src/classes"
      }
    },
    {
      "name": "MutesData",
      "description": "Mute Data",
      "type": [
        [
          [
            "Object"
          ]
        ]
      ],
      "props": [
        {
          "name": "id",
          "description": "ID of the Mute",
          "type": [
            [
              [
                "number"
              ]
            ]
          ]
        },
        {
          "name": "type",
          "description": "Type of the Mute",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "guildID",
          "description": "Guild ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "memberID",
          "description": "Member ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "moderatorID",
          "description": "Moderator ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "channelID",
          "description": "Channel ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "time",
          "description": "Mute Time",
          "type": [
            [
              [
                "number"
              ]
            ]
          ]
        },
        {
          "name": "unmutedAt",
          "description": "Time when Member will be Unmuted",
          "type": [
            [
              [
                "number"
              ]
            ]
          ]
        }
      ],
      "meta": {
        "line": 62,
        "file": "Base.ts",
        "path": "src/classes"
      }
    },
    {
      "name": "GuildData",
      "description": "Guild Data",
      "type": [
        [
          [
            "Object"
          ]
        ]
      ],
      "props": [
        {
          "name": "guildID",
          "description": "Guild ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "muteRole",
          "description": "Mute Role ID",
          "type": [
            [
              [
                "null"
              ]
            ],
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "warns",
          "description": "Guild Warns",
          "type": [
            [
              [
                "Array",
                "<"
              ],
              [
                "WarnsData",
                ">"
              ]
            ]
          ]
        },
        {
          "name": "mutes",
          "description": "Guild Mutes",
          "type": [
            [
              [
                "Array",
                "<"
              ],
              [
                "MutesData",
                ">"
              ]
            ]
          ]
        },
        {
          "name": "ImmunityUsersData",
          "description": "Users with Immunity",
          "type": [
            [
              [
                "Array",
                "<"
              ],
              [
                "ImmunityUsersData",
                ">"
              ]
            ]
          ]
        }
      ],
      "meta": {
        "line": 75,
        "file": "Base.ts",
        "path": "src/classes"
      }
    },
    {
      "name": "WarnsData",
      "description": "Warn Data",
      "type": [
        [
          [
            "Object"
          ]
        ]
      ],
      "props": [
        {
          "name": "id",
          "description": "ID of the Warn",
          "type": [
            [
              [
                "number"
              ]
            ]
          ]
        },
        {
          "name": "guildID",
          "description": "Guild ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "memberID",
          "description": "Member ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "moderatorID",
          "description": "Moderator ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "channelID",
          "description": "Channel ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "warns",
          "description": "Warns Length",
          "type": [
            [
              [
                "number"
              ]
            ],
            [
              [
                "null"
              ]
            ]
          ]
        },
        {
          "name": "reason",
          "description": "Warn Reason",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        }
      ],
      "meta": {
        "line": 85,
        "file": "Base.ts",
        "path": "src/classes"
      }
    },
    {
      "name": "ImmunityUsersData",
      "description": "Immunity Users Data",
      "type": [
        [
          [
            "Object"
          ]
        ]
      ],
      "props": [
        {
          "name": "status",
          "description": "Status of Immunity",
          "type": [
            [
              [
                "boolean"
              ]
            ]
          ]
        },
        {
          "name": "memberID",
          "description": "Member ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        }
      ],
      "meta": {
        "line": 97,
        "file": "Base.ts",
        "path": "src/classes"
      }
    }
  ],
  "externals": []
}