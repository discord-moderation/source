{
  "meta": {
    "generator": "0.11.1",
    "format": 22,
    "date": 1629405233620
  },
  "custom": {
    "general": {
      "name": "General",
      "files": {
        "welcome": {
          "name": "Welcome",
          "type": "md",
          "content": "<img src=\"https://raw.githubusercontent.com/bad-boy-discord/discord-moderation/main/assets/discord-moderation-main.png\" />\r\n<hr>\r\n\r\n## Welcome\r\n<b>Welcome! This 'discord-moderation' module!</b><br>\r\n<b>This module that simplify creating moderation system to your discord bot.</b>\r\n\r\n## Requirements\r\n- <b>Node.JS v14</b>\r\n- <b>Discord.JS v12</b>\r\n\r\n## Module Classes:\r\n- 'Moderation' - <b>Main class that enables all the Moderation System.</b>\r\n- 'MuteHandler' - <b>Class that enables Mute System.</b>\r\n- 'WarnHandler' - <b>Class that enables Warn System.</b>\r\n- 'Logger' - <b>Class that logs something.</b>\r\n- 'Utils' - <b>Class that includes some utils for other classes.</b>\r\n\r\n### Warning!\r\n<b>To use __mute__ methods, You need to set MuteRole using setMuteRole in Utils#setMuteRole!</b>\r\n\r\n### Module Options\r\n- 'storage' - <b>Required for creating, parsing, editing DB File.</b>\r\n\r\n### Quick Inialization Example\r\n```js\r\nconst { Client, Intents } = require('discord.js');\r\nconst { Moderation } = require('discord-moderation');\r\n\r\nconst client = new Client({\r\n  ws: {\r\n    intents: Intents.ALL\r\n  }\r\n});\r\n\r\nconst moderation = new Moderation(client, {\r\n  storage: './db/db.json'\r\n});\r\n```\r\n\r\n## This module uses\r\n- <b><a href='https://discord.js.org'>Discord.JS v12</a></b>\r\n- <b><a href='https://www.npmjs.com/package/fs'>fs</a></b>\r\n- <b><a href='https://www.npmjs.com/package/ms'>ms</a></b>\r\n\r\n## Examples\r\n<b><a href=\"https://github.com/bad-boy-discord/discord-moderation/tree/main/examples\">Click here to see JavaScript and TypeScript examples.</a></b>\r\n\r\n## Links\r\n<b>Module Creator: <a href=\"https://www.npmjs.com/~badboy-discord\">badboy-discord</a></b><br>\r\n<b>Creator Discord: <a href=\"https://discord.com/545956523571150858\">goose#1046</a></b><br>\r\n<b>NodeJS: <a href=\"https://www.nodejs.org/\">Click</a></b><br>\r\n<b>TypeScript: <a href=\"https://www.typescriptlang.org/\">Click</a></b><br>\r\n<b>Support Server: <a href=\"https://discord.gg/eGZfaWsZgR\">Click</a></b><br>\r\n<b>Website: <a href=\"https://dm-web.tk/\">Click</a></b>",
          "path": "docs/general/welcome.md"
        },
        "changelog": {
          "name": "ChangeLog",
          "type": "md",
          "content": "<strong>Information taked from [GitHub Releases](https://github.com/bad-boy-discord/discord-moderation/release) and [Discord Server](https://discord.com/invite/eGZfaWsZgR).</strong>\r\n<hr>\r\n› <strong>1.0.0 | First Release</strong> <br />\r\n» <strong>4 classes:</strong> <br />\r\n››› <strong>Moderation (main)</strong> <br />\r\n››› <strong>MuteHandler (Mute System)</strong> <br />\r\n››› <strong>WarnHandler (Warn System)</strong> <br />\r\n››› <strong>Utils (Some things)</strong> <br />\r\n<hr>\r\n› <strong>1.0.6 - 1.0.7 | Fixes</strong> <br />\r\n» <strong>Changes Lost :(</strong> <br />\r\n<hr>\r\n› <strong>1.0.9 Update</strong> <br />\r\n» <strong>Changes:</strong> <br />\r\n››› <strong>Advanced JSDoc</strong> <br />\r\n››› <strong>Some fixes</strong> <br />\r\n<hr>\r\n› <strong>1.0.11 Update</strong> <br />\r\n» <strong>Changes:</strong> <br />\r\n››› <strong>Fixed Bugs</strong> <br />\r\n<hr>\r\n› <strong>1.0.12 Update</strong> <br />\r\n» <strong>Changes:</strong> <br />\r\n››› <strong>Fixed Bugs</strong> <br />\r\n››› <strong>Advanced JSDoc</strong> <br />\r\n››› <strong>Other fixes</strong> <br />\r\n<hr>\r\n› <strong>1.0.13 Update</strong> <br />\r\n» <strong>Changes:</strong> <br />\r\n››› <strong>Fixed Errors</strong> <br />\r\n››› <strong>Advanced JSDoc</strong> <br />\r\n<hr>\r\n› <strong>1.0.14 Update</strong> <br />\r\n» <strong>Changes:</strong> <br />\r\n››› <strong>Fixed Errors</strong> <br />\r\n››› <strong>Advanced JSDoc</strong> <br />\r\n<hr>\r\n› <strong>1.0.15 Update</strong> <br />\r\n» <strong>Changes:</strong> <br />\r\n››› <strong>Fixed bug with 'super' in constructors in MuteHandler and WarnHandler.</strong> <br />\r\n<hr>\r\n› <strong>1.0.16 Update</strong> <br />\r\n» <strong>Changes:</strong> <br />\r\n››› <strong>Fixed bug in WarnHandler.</strong> <br />\r\n<hr>\r\n› <strong>1.0.17 Update</strong> <br />\r\n» <strong>Changes:</strong> <br />\r\n››› <strong>Fixed bug in WarnHandler (again).</strong> <br />\r\n<hr>\r\n› <strong>1.0.18 Update</strong> <br />\r\n» <strong>Changes:</strong> <br />\r\n››› <strong>Advanced JSDoc</strong> <br />\r\n››› <strong>Fixed all founded bugs</strong> <br />\r\n<hr>\r\n› <strong>1.0.20 Update</strong> <br />\r\n» <strong>Changes:</strong> <br />\r\n››› <strong>Added TypeDefs</strong> <br />\r\n››› <strong>Fixed all founded bugs by Gaevleflammen#6969</strong> <br />\r\n<hr>\r\n› <strong>1.0.21 Fix</strong> <br />\r\n» <strong>Changes:</strong> <br />\r\n››› <strong>Fixed package typings</strong> <br />\r\n<hr>\r\n› <strong>1.0.22 Update</strong> <br />\r\n» <strong>Changes:</strong> <br />\r\n››› <strong>Bump Discord.JS version to v13</strong> <br />\r\n››› <strong>Update Readme.MD</strong> <br />\r\n<hr>\r\n› <strong>1.0.23 Update</strong> <br />\r\n» <strong>Changes:</strong> <br />\r\n››› <strong>Replaced 'colors' from devDependencies to dependencies (dropping error)</strong> <br />\r\n<hr>\r\n› <strong>2.0.0 Global Update</strong> <br />\r\n» <strong>Changes:</strong> <br />\r\n››› <strong>ReWrite to TypeScript</strong> <br />\r\n››› <strong>Added Promises</strong> <br />\r\n››› <strong>Debug Mode (Advanced Logger)</strong> <br />\r\n››› <strong>quick.db Support</strong> <br />\r\n››› <strong>Log Embed Generator</strong> <br />\r\n››› <strong>Anti-Link, Anti-Invite, Anti-Spam, Auto-Role, Blacklist Systems</strong> <br />",
          "path": "docs/general/changelog.md"
        }
      }
    }
  },
  "classes": [
    {
      "name": "Base",
      "description": "Base class that uses in all other classes.",
      "access": "private",
      "methods": [
        {
          "name": "on",
          "description": "Handles all the Events",
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "once",
          "description": "Handles all the Events",
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "emit",
          "description": "Emits any Event",
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "boolean"
              ]
            ]
          ],
          "meta": {
            "line": 43,
            "file": "Base.ts",
            "path": "src/classes"
          }
        }
      ],
      "meta": {
        "line": 6,
        "file": "Base.ts",
        "path": "src/classes"
      }
    },
    {
      "name": "Logger",
      "description": "Logger Class",
      "methods": [
        {
          "name": "log",
          "description": "Logging Something",
          "params": [
            {
              "name": "message",
              "description": "Message to Log",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "void"
              ]
            ]
          ],
          "meta": {
            "line": 32,
            "file": "Logger.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "warn",
          "description": "Logging Something",
          "params": [
            {
              "name": "message",
              "description": "Message to Log",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "void"
              ]
            ]
          ],
          "meta": {
            "line": 32,
            "file": "Logger.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "error",
          "description": "Logging Something",
          "params": [
            {
              "name": "message",
              "description": "Message to Log",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "void"
              ]
            ]
          ],
          "meta": {
            "line": 32,
            "file": "Logger.ts",
            "path": "src/classes"
          }
        }
      ],
      "meta": {
        "line": 3,
        "file": "Logger.ts",
        "path": "src/classes"
      }
    },
    {
      "name": "Moderation",
      "description": "Class that enables Moderation System",
      "extends": [
        [
          [
            "Base"
          ]
        ]
      ],
      "construct": {
        "name": "Moderation",
        "params": [
          {
            "name": "client",
            "description": "Discord.JS Client",
            "type": [
              [
                [
                  "Client"
                ]
              ]
            ]
          },
          {
            "name": "options",
            "description": "Module Options",
            "type": [
              [
                [
                  "Options"
                ]
              ]
            ]
          }
        ]
      },
      "props": [
        {
          "name": "client",
          "description": "Discord Client",
          "type": [
            [
              [
                "Client"
              ]
            ]
          ],
          "meta": {
            "line": 42,
            "file": "Moderation.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "options",
          "description": "Module Options",
          "type": [
            [
              [
                "Options"
              ]
            ]
          ],
          "meta": {
            "line": 48,
            "file": "Moderation.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "utils",
          "description": "Module Utils",
          "type": [
            [
              [
                "Utils"
              ]
            ]
          ],
          "meta": {
            "line": 54,
            "file": "Moderation.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "isReady",
          "description": "Module Ready State",
          "type": [
            [
              [
                "boolean"
              ]
            ]
          ],
          "meta": {
            "line": 60,
            "file": "Moderation.ts",
            "path": "src/classes"
          }
        }
      ],
      "methods": [
        {
          "name": "mute",
          "description": "Method that Mutes or Temp Mutes Member",
          "emits": [
            "Moderation#event:muteMember"
          ],
          "params": [
            {
              "name": "type",
              "description": "Type of the Mute",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            },
            {
              "name": "message",
              "description": "Discord Message",
              "type": [
                [
                  [
                    "Message"
                  ]
                ]
              ]
            },
            {
              "name": "member",
              "description": "Member to Mute",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            },
            {
              "name": "reason",
              "description": "Reason of the Mute",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            },
            {
              "name": "time",
              "description": "Time of the Temp Mute",
              "type": [
                [
                  [
                    "number"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "MutesData",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 77,
            "file": "Moderation.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "unmute",
          "description": "Method that unmutes Member",
          "emits": [
            "Moderation#event:unmuteMember"
          ],
          "params": [
            {
              "name": "member",
              "description": "Member to Mute",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "MutesData",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 118,
            "file": "Moderation.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "on",
          "description": "Handles all the Events",
          "inherits": "Base#on",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "once",
          "description": "Handles all the Events",
          "inherits": "Base#once",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "emit",
          "description": "Emits any Event",
          "inherits": "Base#emit",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "boolean"
              ]
            ]
          ],
          "meta": {
            "line": 43,
            "file": "Base.ts",
            "path": "src/classes"
          }
        }
      ],
      "meta": {
        "line": 25,
        "file": "Moderation.ts",
        "path": "src/classes"
      }
    },
    {
      "name": "MuteManager",
      "description": "Class that Handles/Creates Mutes",
      "extends": [
        [
          [
            "Base"
          ]
        ]
      ],
      "props": [
        {
          "name": "client",
          "description": "Discord Client",
          "type": [
            [
              [
                "Client"
              ]
            ]
          ],
          "meta": {
            "line": 31,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "options",
          "description": "Module Options",
          "type": [
            [
              [
                "Options"
              ]
            ]
          ],
          "meta": {
            "line": 36,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "logger",
          "description": "Module Logger",
          "type": [
            [
              [
                "Logger"
              ]
            ]
          ],
          "meta": {
            "line": 41,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "utils",
          "description": "Module Utils",
          "type": [
            [
              [
                "Utils"
              ]
            ]
          ],
          "meta": {
            "line": 46,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        }
      ],
      "methods": [
        {
          "name": "setRole",
          "description": "This method sets Mute Role.",
          "params": [
            {
              "name": "guild",
              "description": "Discord Guild",
              "type": [
                [
                  [
                    "Guild"
                  ]
                ]
              ]
            },
            {
              "name": "role",
              "description": "Discord Role",
              "type": [
                [
                  [
                    "Role"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 53,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "getRole",
          "description": "This method getting Mute Role.",
          "params": [
            {
              "name": "guild",
              "description": "Discord Guild",
              "type": [
                [
                  [
                    "Guild"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 94,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "getMute",
          "description": "Method that finds Mute in Storage",
          "params": [
            {
              "name": "member",
              "description": "Discord Member",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "MutesData",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 131,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "create",
          "description": "This is method that mutes member.",
          "params": [
            {
              "name": "type",
              "description": "Mute Type",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            },
            {
              "name": "message",
              "description": "Message",
              "type": [
                [
                  [
                    "Message"
                  ]
                ]
              ]
            },
            {
              "name": "member",
              "description": "Discord Guild Member",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            },
            {
              "name": "reason",
              "description": "Reason of the Mute",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            },
            {
              "name": "time",
              "description": "Time of Temp Mute",
              "type": [
                [
                  [
                    "number"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "MutesData",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 153,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "delete",
          "description": "Method that removes Mute from Member",
          "emits": [
            "Moderation#event:unmuteMember"
          ],
          "params": [
            {
              "name": "message",
              "description": "Discord Message",
              "type": [
                [
                  [
                    "Message"
                  ]
                ]
              ]
            },
            {
              "name": "member",
              "description": "Discord Member",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "MutesData",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 297,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "handleUtilsMute",
          "description": "Private method that will handle Mute",
          "emits": [
            "Moderation#event:unmuteMember"
          ],
          "params": [
            {
              "name": "guild",
              "description": "Discord Guild",
              "type": [
                [
                  [
                    "Guild"
                  ]
                ]
              ]
            },
            {
              "name": "member",
              "description": "Guild Member",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            },
            {
              "name": "time",
              "description": "Time of the Mute",
              "type": [
                [
                  [
                    "number"
                  ]
                ]
              ]
            },
            {
              "name": "muteData",
              "description": "Mute Data",
              "type": [
                [
                  [
                    "MutesData"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "null",
                "|"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 395,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "handleMute",
          "description": "Private method that will handle Mute",
          "emits": [
            "Moderation#event:unmuteMember"
          ],
          "params": [
            {
              "name": "guild",
              "description": "Discord Guild",
              "type": [
                [
                  [
                    "Guild"
                  ]
                ]
              ]
            },
            {
              "name": "member",
              "description": "Guild Member",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            },
            {
              "name": "time",
              "description": "Time of the Mute",
              "type": [
                [
                  [
                    "number"
                  ]
                ]
              ]
            },
            {
              "name": "muteData",
              "description": "Mute Data",
              "type": [
                [
                  [
                    "MutesData"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "null",
                "|"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 395,
            "file": "MuteManager.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "on",
          "description": "Handles all the Events",
          "inherits": "Base#on",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "once",
          "description": "Handles all the Events",
          "inherits": "Base#once",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "emit",
          "description": "Emits any Event",
          "inherits": "Base#emit",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "boolean"
              ]
            ]
          ],
          "meta": {
            "line": 43,
            "file": "Base.ts",
            "path": "src/classes"
          }
        }
      ],
      "meta": {
        "line": 21,
        "file": "MuteManager.ts",
        "path": "src/classes"
      }
    },
    {
      "name": "Utils",
      "description": "Class that including some methods.",
      "extends": [
        [
          [
            "Base"
          ]
        ]
      ],
      "props": [
        {
          "name": "client",
          "description": "Discord Client",
          "type": [
            [
              [
                "Client"
              ]
            ]
          ],
          "meta": {
            "line": 30,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "mutes",
          "description": "Mute Manager",
          "type": [
            [
              [
                "MuteManager"
              ]
            ]
          ],
          "meta": {
            "line": 37,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "options",
          "description": "Module Options",
          "type": [
            [
              [
                "Options"
              ]
            ]
          ],
          "meta": {
            "line": 44,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "logger",
          "description": "Module Logger",
          "type": [
            [
              [
                "Logger"
              ]
            ]
          ],
          "meta": {
            "line": 51,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        }
      ],
      "methods": [
        {
          "name": "checkMute",
          "description": "Method that will be used when Member joins Server",
          "params": [
            {
              "name": "member",
              "description": "Discord Member",
              "type": [
                [
                  [
                    "GuildMember"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 59,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "getGuild",
          "description": "Method that will return Guild Data",
          "params": [
            {
              "name": "guild",
              "description": "Discord Guild",
              "type": [
                [
                  [
                    "Guild"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "GuilData",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 86,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "createGuild",
          "description": "Method that created Guild Data",
          "params": [
            {
              "name": "guild",
              "description": "Discord Guild",
              "type": [
                [
                  [
                    "Guild"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 127,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "setData",
          "description": "Method that changes data in Storage",
          "params": [
            {
              "name": "guild",
              "description": "Discord Guild",
              "type": [
                [
                  [
                    "Guild"
                  ]
                ]
              ]
            },
            {
              "name": "newData",
              "description": "New Guild Data",
              "type": [
                [
                  [
                    "GuildData"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 194,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "checkFile",
          "description": "Method that will check Storage File every 5 seconds",
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 236,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "checkMutes",
          "description": "Method that checks mutes when client is ready",
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "boolean",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 272,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "wait",
          "description": "Method that create Timeout with Promise",
          "params": [
            {
              "name": "ms",
              "description": "Milliseconds",
              "type": [
                [
                  [
                    "number"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Promise",
                "<"
              ],
              [
                "unknown",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 422,
            "file": "Utils.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "on",
          "description": "Handles all the Events",
          "inherits": "Base#on",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "once",
          "description": "Handles all the Events",
          "inherits": "Base#once",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "EventEmitter"
              ]
            ]
          ],
          "meta": {
            "line": 29,
            "file": "Base.ts",
            "path": "src/classes"
          }
        },
        {
          "name": "emit",
          "description": "Emits any Event",
          "inherits": "Base#emit",
          "inherited": true,
          "params": [
            {
              "name": "event",
              "description": "Event Name",
              "type": [
                [
                  [
                    "String"
                  ]
                ]
              ]
            },
            {
              "name": "fn",
              "description": "Callback",
              "type": [
                [
                  [
                    "function"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "boolean"
              ]
            ]
          ],
          "meta": {
            "line": 43,
            "file": "Base.ts",
            "path": "src/classes"
          }
        }
      ],
      "meta": {
        "line": 19,
        "file": "Utils.ts",
        "path": "src/classes"
      }
    }
  ],
  "interfaces": [],
  "typedefs": [
    {
      "name": "Options",
      "description": "Module Options",
      "type": [
        [
          [
            "Object"
          ]
        ]
      ],
      "props": [
        {
          "name": "storageType",
          "description": "Storage Type (Json or SQLite)",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "storagePath",
          "description": "Storage Path (Only for Json type)",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        }
      ],
      "meta": {
        "line": 55,
        "file": "Base.ts",
        "path": "src/classes"
      }
    },
    {
      "name": "MutesData",
      "description": "Mute Data",
      "type": [
        [
          [
            "Object"
          ]
        ]
      ],
      "props": [
        {
          "name": "id",
          "description": "ID of the Mute",
          "type": [
            [
              [
                "number"
              ]
            ]
          ]
        },
        {
          "name": "type",
          "description": "Type of the Mute",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "guildID",
          "description": "Guild ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "memberID",
          "description": "Member ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "moderatorID",
          "description": "Moderator ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "channelID",
          "description": "Channel ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "time",
          "description": "Mute Time",
          "type": [
            [
              [
                "number"
              ]
            ]
          ]
        },
        {
          "name": "unmutedAt",
          "description": "Time when Member will be Unmuted",
          "type": [
            [
              [
                "number"
              ]
            ]
          ]
        }
      ],
      "meta": {
        "line": 62,
        "file": "Base.ts",
        "path": "src/classes"
      }
    },
    {
      "name": "GuildData",
      "description": "Guild Data",
      "type": [
        [
          [
            "Object"
          ]
        ]
      ],
      "props": [
        {
          "name": "guildID",
          "description": "Guild ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "muteRole",
          "description": "Mute Role ID",
          "type": [
            [
              [
                "null"
              ]
            ],
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "warns",
          "description": "Guild Warns",
          "type": [
            [
              [
                "Array",
                "<"
              ],
              [
                "WarnsData",
                ">"
              ]
            ]
          ]
        },
        {
          "name": "mutes",
          "description": "Guild Mutes",
          "type": [
            [
              [
                "Array",
                "<"
              ],
              [
                "MutesData",
                ">"
              ]
            ]
          ]
        },
        {
          "name": "ImmunityUsersData",
          "description": "Users with Immunity",
          "type": [
            [
              [
                "Array",
                "<"
              ],
              [
                "ImmunityUsersData",
                ">"
              ]
            ]
          ]
        }
      ],
      "meta": {
        "line": 75,
        "file": "Base.ts",
        "path": "src/classes"
      }
    },
    {
      "name": "WarnsData",
      "description": "Warn Data",
      "type": [
        [
          [
            "Object"
          ]
        ]
      ],
      "props": [
        {
          "name": "id",
          "description": "ID of the Warn",
          "type": [
            [
              [
                "number"
              ]
            ]
          ]
        },
        {
          "name": "guildID",
          "description": "Guild ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "memberID",
          "description": "Member ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "moderatorID",
          "description": "Moderator ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "channelID",
          "description": "Channel ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "warns",
          "description": "Warns Length",
          "type": [
            [
              [
                "number"
              ]
            ],
            [
              [
                "null"
              ]
            ]
          ]
        },
        {
          "name": "reason",
          "description": "Warn Reason",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        }
      ],
      "meta": {
        "line": 85,
        "file": "Base.ts",
        "path": "src/classes"
      }
    },
    {
      "name": "ImmunityUsersData",
      "description": "Immunity Users Data",
      "type": [
        [
          [
            "Object"
          ]
        ]
      ],
      "props": [
        {
          "name": "status",
          "description": "Status of Immunity",
          "type": [
            [
              [
                "boolean"
              ]
            ]
          ]
        },
        {
          "name": "memberID",
          "description": "Member ID",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        }
      ],
      "meta": {
        "line": 97,
        "file": "Base.ts",
        "path": "src/classes"
      }
    }
  ],
  "externals": []
}