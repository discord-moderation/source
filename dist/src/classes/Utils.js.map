{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../../../src/classes/Utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Client, Guild } from \"discord.js\";\nimport { Options, GuildData } from \"../constants\";\nimport { Logger } from \"./Logger\";\nimport { Base } from \"./Base\";\nimport { version } from \"../../package.json\";\nimport fetch from \"node-fetch\";\n\n// Storage Imports\nimport db from \"quick.db\";\nimport fs from \"fs\";\n\nexport declare interface Utils {\n  client: Client;\n  options: Options;\n\n  logger: Logger;\n}\n\n/**\n * Utils Class\n *\n * @class\n * @classdesc Class that including some methods.\n * @extends {Base}\n */\nexport class Utils extends Base {\n  /**\n   *\n   * @param {Client} client Discord.JS Client\n   * @param {Options} options Module Options\n   *\n   * @constructor\n   */\n  constructor(client: Client, options: Options) {\n    super();\n\n    /**\n     * Discord Client\n     * @type {Client}\n     */\n    this.client = client;\n\n    /**\n     * Module Options\n     * @type {Options}\n     */\n    this.options = options;\n\n    /**\n     * Module Logger\n     * @type {Logger}\n     */\n    this.logger = new Logger();\n  }\n\n  /**\n   * Method that will return Guild Data\n   *\n   * @param {Guild} guild Discord Guild\n   * @returns {Promise<GuilData>}\n   */\n  getGuild(guild: Guild): Promise<GuildData> {\n    return new Promise(async (res, rej) => {\n      if (!guild) return this.logger.error('Specify \"Guild\" in Utils#getGuild');\n\n      switch (this.options.storageType) {\n        case \"sqlite\": {\n          var data: GuildData = db.fetch(`guild.${guild.id}`);\n\n          if (data === undefined) {\n            this.createGuild(guild);\n\n            data = db.fetch(`guild.${guild.id}`);\n          } else return res(data);\n        }\n\n        case \"json\": {\n          var file: Array<GuildData> = JSON.parse(\n            fs.readFileSync(this.options.storagePath).toString()\n          );\n\n          const data = file.find((x) => x.guildID === guild.id);\n\n          if (!data || data === undefined) {\n            this.createGuild(guild);\n\n            file = JSON.parse(\n              fs.readFileSync(this.options.storagePath).toString()\n            );\n          } else return res(data);\n        }\n      }\n    });\n  }\n\n  /**\n   * Method that created Guild Data\n   *\n   * @param {Guild} guild - Discord Guild\n   * @returns {Promise<boolean>}\n   */\n  createGuild(guild: Guild): Promise<boolean> {\n    return new Promise(async (res, rej) => {\n      if (!guild)\n        return this.logger.error('Specify \"Guild\" in Utils#createGuild');\n\n      switch (this.options.storageType) {\n        case \"sqlite\": {\n          const data = db.fetch(`guild.${guild.id}`);\n\n          if (data === undefined) {\n            db.set(`guild.${guild.id}`, {\n              guildID: guild.id,\n              muteRole: null,\n              warns: [],\n              mutes: [],\n              immunityUsers: [],\n            });\n\n            return res(true);\n          } else {\n            return rej(\n              this.logger.warn(\n                `Guild with name \"${guild.name}\" already placed in DB.`\n              )\n            );\n          }\n        }\n\n        case \"json\": {\n          const file: Array<GuildData> = JSON.parse(\n            fs.readFileSync(this.options.storagePath).toString()\n          );\n\n          if (file.find((x) => x.guildID === guild.id)) {\n            return rej(\n              this.logger.warn(\n                `Guild with name \"${guild.name}\" already placed in DB.`\n              )\n            );\n          }\n\n          const data: GuildData = {\n            guildID: guild.id,\n            muteRole: null,\n            warns: [],\n            mutes: [],\n            immunityUsers: [],\n          };\n\n          file.push(data);\n          fs.writeFileSync(\n            this.options.storagePath,\n            JSON.stringify(file, null, \"\\t\")\n          );\n\n          return res(true);\n        }\n      }\n    });\n  }\n\n  /**\n   * Method that changes data in Storage\n   *\n   * @param {Guild} guild Discord Guild\n   * @param {GuildData} newData New Guild Data\n   * @returns {Promise<boolean>}\n   */\n  setData(guild: Guild, newData: GuildData): Promise<boolean> {\n    return new Promise(async (res, rej) => {\n      if (!guild) return this.logger.error('Specify \"Guild\" in Utils#setData!');\n      if (!newData)\n        return this.logger.error('Specify \"GuildData\" in Utils#setData!');\n\n      await this.getGuild(guild);\n\n      switch (this.options.storageType) {\n        case \"sqlite\": {\n          db.set(`guild.${guild.id}`, newData);\n\n          return res(true);\n        }\n\n        case \"json\": {\n          const file = JSON.parse(\n            fs.readFileSync(this.options.storagePath).toString()\n          );\n\n          fs.writeFileSync(\n            this.options.storagePath,\n            JSON.stringify(file, null, \"\\t\")\n          );\n\n          return res(true);\n        }\n      }\n    });\n  }\n\n  /**\n   * Method that will check Storage File every 5 seconds\n   *\n   * @returns {Promise<boolean>}\n   */\n  checkFile(): Promise<boolean> {\n    return new Promise(async (res, rej) => {\n      if (this.options.storageType !== \"json\")\n        return this.logger.error('Logger type is not \"JSON\"');\n\n      setInterval(async () => {\n        const path = this.options.storagePath;\n\n        if (!fs.existsSync(path)) {\n          this.logger.warn(\"Creating Storage File...\");\n\n          fs.writeFileSync(path, JSON.stringify([], null, \"\\t\"));\n\n          await this.wait(1000);\n\n          this.logger.log(\"Created Storage File.\");\n        }\n\n        const file = fs.readFileSync(path).toString();\n\n        if (!file.startsWith(\"[\") && !file.endsWith(\"]\")) {\n          return this.logger.error(\"Storage File contains wrong data!\");\n        }\n      }, 5000);\n\n      res(true);\n    });\n  }\n\n  /**\n   * Method that checks mutes when client is ready\n   *\n   * @returns {Promise<boolean>}\n   */\n  checkMutes(): Promise<boolean> {\n    return new Promise(async (res, rej) => {\n      switch (this.options.storageType) {\n        case \"sqlite\": {\n          return this.client.guilds.cache.forEach(async (guild) => {\n            const data = await this.getGuild(guild);\n            if (!data.mutes.length) return;\n\n            for (let i = 0; i < data.mutes.length; i++) {\n              const mute = data.mutes[i];\n\n              if (mute.type === \"mute\") continue;\n              if (data.muteRole === null) continue;\n\n              const muteRole = guild.roles.cache.get(data.muteRole);\n              if (!muteRole) {\n                return rej(\n                  this.logger.error(`Mute Role in \"${guild.name}\" isn't found!`)\n                );\n              }\n\n              const member = guild.members.cache.get(mute.memberID);\n              if (!member) {\n                return rej(\n                  this.logger.error(\n                    `Member with ID \"${mute.memberID}\" isn't found in server!`\n                  )\n                );\n              }\n\n              if (mute.unmutedAt === undefined) continue;\n\n              if (Date.now() > mute.unmutedAt) {\n                await member.roles.remove(muteRole).catch((err) => {\n                  return rej(this.logger.error(err.message));\n                });\n\n                mute.unmutedAt = Date.now();\n\n                this.emit(\"unmuteMember\", mute);\n              } else {\n                const delay = mute.unmutedAt - Date.now();\n\n                setTimeout(async () => {\n                  await member.roles.remove(muteRole).catch((err) => {\n                    return rej(this.logger.error(err.message));\n                  });\n\n                  mute.unmutedAt = Date.now();\n\n                  this.emit(\"unmuteMember\", mute);\n                }, delay);\n              }\n            }\n\n            return res(true);\n          });\n        }\n\n        case \"json\": {\n          return this.client.guilds.cache.forEach(async (guild) => {\n            const data = await this.getGuild(guild);\n            if (!data.mutes.length) return;\n\n            for (let i = 0; i < data.mutes.length; i++) {\n              const mute = data.mutes[i];\n              if (mute.type === \"mute\") continue;\n              if (data.muteRole === null) continue;\n\n              const muteRole = guild.roles.cache.get(data.muteRole);\n              if (!muteRole) {\n                return rej(\n                  this.logger.error(`Mute Role in \"${guild.name}\" isn't found!`)\n                );\n              }\n\n              const member = guild.members.cache.get(mute.memberID);\n              if (!member) {\n                return rej(\n                  this.logger.error(\n                    `Member with ID \"${mute.memberID}\" isn't found in server!`\n                  )\n                );\n              }\n\n              if (mute.unmutedAt === undefined) continue;\n\n              if (Date.now() > mute.unmutedAt) {\n                await member.roles.remove(muteRole).catch((err) => {\n                  return rej(this.logger.error(err.message));\n                });\n\n                mute.unmutedAt = Date.now();\n\n                this.emit(\"unmuteMember\", mute);\n              } else {\n                const delay = mute.unmutedAt - Date.now();\n\n                setTimeout(async () => {\n                  await member.roles.remove(muteRole).catch((err) => {\n                    return rej(this.logger.error(err.message));\n                  });\n\n                  mute.unmutedAt = Date.now();\n\n                  this.emit(\"unmuteMember\", mute);\n                }, delay);\n              }\n            }\n\n            return res(true);\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Method that create Timeout with Promise\n   *\n   * @param {number} ms Milliseconds\n   * @returns {Promise<unknown>}\n   */\n  wait(ms: number): Promise<unknown> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  checkUpdate(): Promise<any> {\n    return new Promise(async (res, rej) => {\n      const data = await fetch(\n        \"https://registry.npmjs.com/discord-moderation\"\n      ).then((res) => res.json());\n      const lastVersion: string = data[\"dist-tags\"][\"latest\"];\n\n      if (version !== lastVersion) {\n        return this.logger.warn(\n          'New Version of Discord-Moderation avaliable!\\nWe recomend you to update this module using \"npm i discord-moderation@latest\" command,'\n        );\n      }\n    });\n  }\n}\n"]}