{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../../src/classes/Utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Client, Guild, GuildMember } from 'discord.js'\nimport { MuteManager } from './MuteManager'\nimport { GuildData } from '../types/GuildData'\nimport { Options } from '../types/Options'\nimport { Logger } from './Logger'\nimport { Base } from './Base'\n\n// Storage Imports\nimport db from 'quick.db'\nimport fs from 'fs'\n\nexport declare interface Utils {\n    client: Client\n    mutes: MuteManager\n    options: Options\n    logger: Logger\n}\n\n/**\n * Utils Class\n *\n * @class\n * @classdesc Class that including some methods.\n * @extends {Base}\n */\nexport class Utils extends Base {\n    constructor(client: Client, options: Options) {\n        super()\n\n        /**\n         * Discord Client\n         *\n         * @type {Client}\n         */\n        this.client = client\n\n        /**\n         * Mute Manager\n         *\n         * @type {MuteManager}\n         */\n        this.mutes = new MuteManager(this.client, this.options)\n\n        /**\n         * Module Options\n         *\n         * @type {Options}\n         */\n        this.options = options\n\n        /**\n         * Module Logger\n         *\n         * @type {Logger}\n         */\n        this.logger = new Logger()\n    }\n\n    /**\n     * Method that will be used when Member joins Server\n     *\n     * @param {GuildMember} member - Discord Member\n     *\n     * @returns {Promise<boolean>}\n     */\n    checkMute(member: GuildMember): Promise<boolean> {\n        return new Promise(async (res, rej) => {\n            if (!member)\n                return this.logger.error(\n                    'Specify \"GuildMember\" in Utils#checkMute'\n                )\n\n            const data = await this.getGuild(member.guild)\n            const mute = data.mutes.find((x) => x.memberID === member.id)\n\n            if (mute) {\n                await this.mutes.handleUtilsMute(member)\n\n                return res(true)\n            } else {\n                return res(false)\n            }\n        })\n    }\n\n    /**\n     * Method that will return Guild Data\n     *\n     * @param {Guild} guild - Discord Guild\n     * @returns {Promise<GuilData>}\n     */\n    getGuild(guild: Guild): Promise<GuildData> {\n        return new Promise(async (res, rej) => {\n            if (!guild)\n                return this.logger.error('Specify \"Guild\" in Utils#getGuild')\n\n            switch (this.options.storageType) {\n                case 'sqlite': {\n                    var data: GuildData = db.fetch(`guild.${guild.id}`)\n\n                    if (data === undefined) {\n                        this.createGuild(guild)\n\n                        data = db.fetch(`guild.${guild.id}`)\n                    } else return res(data)\n                }\n\n                case 'json': {\n                    var file: Array<GuildData> = JSON.parse(\n                        fs.readFileSync(this.options.storagePath).toString()\n                    )\n\n                    const data = file.find((x) => x.guildID === guild.id)\n\n                    if (!data || data === undefined) {\n                        this.createGuild(guild)\n\n                        file = JSON.parse(\n                            fs.readFileSync(this.options.storagePath).toString()\n                        )\n                    } else return res(data)\n                }\n            }\n        })\n    }\n\n    /**\n     * Method that created Guild Data\n     *\n     * @param {Guild} guild - Discord Guild\n     * @returns {Promise<boolean>}\n     */\n    createGuild(guild: Guild): Promise<boolean> {\n        return new Promise(async (res, rej) => {\n            if (!guild)\n                return this.logger.error('Specify \"Guild\" in Utils#createGuild')\n\n            switch (this.options.storageType) {\n                case 'sqlite': {\n                    const data = db.fetch(`guild.${guild.id}`)\n\n                    if (data === undefined) {\n                        db.set(`guild.${guild.id}`, {\n                            guildID: guild.id,\n                            muteRole: null,\n                            warns: [],\n                            mutes: [],\n                            immunityUsers: [],\n                        })\n\n                        return res(true)\n                    } else {\n                        return rej(\n                            this.logger.warn(\n                                `Guild with name \"${guild.name}\" already placed in DB.`\n                            )\n                        )\n                    }\n                }\n\n                case 'json': {\n                    const file: Array<GuildData> = JSON.parse(\n                        fs.readFileSync(this.options.storagePath).toString()\n                    )\n\n                    if (file.find((x) => x.guildID === guild.id)) {\n                        return rej(\n                            this.logger.warn(\n                                `Guild with name \"${guild.name}\" already placed in DB.`\n                            )\n                        )\n                    }\n\n                    const data: GuildData = {\n                        guildID: guild.id,\n                        muteRole: null,\n                        warns: [],\n                        mutes: [],\n                        immunityUsers: [],\n                    }\n\n                    file.push(data)\n                    fs.writeFileSync(\n                        this.options.storagePath,\n                        JSON.stringify(file, null, '\\t')\n                    )\n\n                    return res(true)\n                }\n            }\n        })\n    }\n\n    /**\n     * Method that changes data in Storage\n     *\n     * @param {Guild} guild - Discord Guild\n     * @param {GuildData} newData - New Guild Data\n     *\n     * @returns {Promise<boolean>}\n     */\n    setData(guild: Guild, newData: GuildData): Promise<boolean> {\n        return new Promise(async (res, rej) => {\n            if (!guild)\n                return this.logger.error('Specify \"Guild\" in Utils#setData!')\n            if (!newData)\n                return this.logger.error(\n                    'Specify \"GuildData\" in Utils#setData!'\n                )\n\n            await this.getGuild(guild)\n\n            switch (this.options.storageType) {\n                case 'sqlite': {\n                    db.set(`guild.${guild.id}`, newData)\n\n                    return res(true)\n                }\n\n                case 'json': {\n                    const file = JSON.parse(\n                        fs.readFileSync(this.options.storagePath).toString()\n                    )\n\n                    fs.writeFileSync(\n                        this.options.storagePath,\n                        JSON.stringify(file, null, '\\t')\n                    )\n\n                    return res(true)\n                }\n            }\n        })\n    }\n\n    /**\n     * Method that will check Storage File every 5 seconds\n     *\n     * @returns {Promise<boolean>}\n     */\n    checkFile(): Promise<boolean> {\n        return new Promise(async (res, rej) => {\n            if (this.options.storageType !== 'json')\n                return this.logger.error('Logger type is not \"JSON\"')\n\n            setInterval(async () => {\n                const path = this.options.storagePath\n\n                if (!fs.existsSync(path)) {\n                    this.logger.warn('Creating Storage File...')\n\n                    fs.writeFileSync(path, JSON.stringify([], null, '\\t'))\n\n                    await this.wait(1000)\n\n                    this.logger.log('Created Storage File.')\n                }\n\n                const file = fs.readFileSync(path).toString()\n\n                if (!file.startsWith('[') && !file.endsWith(']')) {\n                    return this.logger.error(\n                        'Storage File contains wrong data!'\n                    )\n                }\n            }, 5000)\n\n            res(true)\n        })\n    }\n\n    /**\n     * Method that checks mutes when client is ready\n     *\n     * @returns {Promise<boolean>}\n     */\n    checkMutes(): Promise<boolean> {\n        return new Promise(async (res, rej) => {\n            switch (this.options.storageType) {\n                case 'sqlite': {\n                    return this.client.guilds.cache.forEach(async (guild) => {\n                        const data = await this.getGuild(guild)\n                        if (!data.mutes.length) return\n\n                        for (let i = 0; i < data.mutes.length; i++) {\n                            const mute = data.mutes[i]\n\n                            if (mute.type === 'mute') continue\n                            if (data.muteRole === null) continue\n\n                            const muteRole = guild.roles.cache.get(\n                                data.muteRole\n                            )\n                            if (!muteRole) {\n                                return rej(\n                                    this.logger.error(\n                                        `Mute Role in \"${guild.name}\" isn't found!`\n                                    )\n                                )\n                            }\n\n                            const member = guild.members.cache.get(\n                                mute.memberID\n                            )\n                            if (!member) {\n                                return rej(\n                                    this.logger.error(\n                                        `Member with ID \"${mute.memberID}\" isn't found in server!`\n                                    )\n                                )\n                            }\n\n                            if (mute.unmutedAt === undefined) continue\n\n                            if (Date.now() > mute.unmutedAt) {\n                                await member.roles\n                                    .remove(muteRole)\n                                    .catch((err) => {\n                                        return rej(\n                                            this.logger.error(err.message)\n                                        )\n                                    })\n\n                                mute.unmutedAt = Date.now()\n\n                                this.emit('unmuteMember', mute)\n                            } else {\n                                const delay = mute.unmutedAt - Date.now()\n\n                                setTimeout(async () => {\n                                    await member.roles\n                                        .remove(muteRole)\n                                        .catch((err) => {\n                                            return rej(\n                                                this.logger.error(err.message)\n                                            )\n                                        })\n\n                                    mute.unmutedAt = Date.now()\n\n                                    this.emit('unmuteMember', mute)\n                                }, delay)\n                            }\n                        }\n\n                        return res(true)\n                    })\n                }\n\n                case 'json': {\n                    return this.client.guilds.cache.forEach(async (guild) => {\n                        const data = await this.getGuild(guild)\n                        if (!data.mutes.length) return\n\n                        for (let i = 0; i < data.mutes.length; i++) {\n                            const mute = data.mutes[i]\n                            if (mute.type === 'mute') continue\n                            if (data.muteRole === null) continue\n\n                            const muteRole = guild.roles.cache.get(\n                                data.muteRole\n                            )\n                            if (!muteRole) {\n                                return rej(\n                                    this.logger.error(\n                                        `Mute Role in \"${guild.name}\" isn't found!`\n                                    )\n                                )\n                            }\n\n                            const member = guild.members.cache.get(\n                                mute.memberID\n                            )\n                            if (!member) {\n                                return rej(\n                                    this.logger.error(\n                                        `Member with ID \"${mute.memberID}\" isn't found in server!`\n                                    )\n                                )\n                            }\n\n                            if (mute.unmutedAt === undefined) continue\n\n                            if (Date.now() > mute.unmutedAt) {\n                                await member.roles\n                                    .remove(muteRole)\n                                    .catch((err) => {\n                                        return rej(\n                                            this.logger.error(err.message)\n                                        )\n                                    })\n\n                                mute.unmutedAt = Date.now()\n\n                                this.emit('unmuteMember', mute)\n                            } else {\n                                const delay = mute.unmutedAt - Date.now()\n\n                                setTimeout(async () => {\n                                    await member.roles\n                                        .remove(muteRole)\n                                        .catch((err) => {\n                                            return rej(\n                                                this.logger.error(err.message)\n                                            )\n                                        })\n\n                                    mute.unmutedAt = Date.now()\n\n                                    this.emit('unmuteMember', mute)\n                                }, delay)\n                            }\n                        }\n\n                        return res(true)\n                    })\n                }\n            }\n        })\n    }\n\n    /**\n     * Method that create Timeout with Promise\n     *\n     * @param {number} ms - Milliseconds\n     * @returns {Promise<unknown>}\n     */\n    wait(ms: number): Promise<unknown> {\n        return new Promise((resolve) => setTimeout(resolve, ms))\n    }\n}\n"]}