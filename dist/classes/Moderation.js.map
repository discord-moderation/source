{"version":3,"file":"Moderation.js","sourceRoot":"","sources":["../../src/classes/Moderation.ts"],"names":[],"mappings":"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","sourcesContent":["// Imports\nimport { Base } from \"./Base\";\nimport { Utils } from \"./Utils\";\nimport { MuteManager } from \"./MuteManager\";\nimport { WarnManager } from \"./WarnManager\";\nimport { Options, MuteTypes, MutesData, WarnsData } from \"../constants\";\nimport ModeratorError from \"./ModeratorError\";\n\n// Discord.JS\nimport { Client, GuildMember, Message } from \"discord.js\";\n\nexport declare interface Moderation {\n  client: Client;\n  options: Options;\n\n  // Classes\n  utils: Utils;\n  mutes: MuteManager;\n  warns: WarnManager;\n\n  // Other\n  isReady: boolean;\n}\n\n/**\n * Main Moderation Class\n *\n * @class\n * @classdesc Class that enables Moderation System\n * @extends {Base}\n */\nexport class Moderation extends Base {\n  /**\n   * @param {Client} client Discord.JS Client\n   * @param {Options} options Module Options\n   *\n   * @constructor\n   */\n  constructor(client: Client, options: Options) {\n    super();\n\n    /**\n     * Discord Client\n     * @type {Client}\n     */\n    this.client = client;\n\n    /**\n     * Module Options\n     * @type {Options}\n     */\n    this.options = options;\n\n    /**\n     * MuteManager Class\n     * @type {MuteManager}\n     */\n    this.mutes = new MuteManager(this.client, this.options);\n\n    /**\n     * WarnManager Class\n     * @type {WarnManager}\n     */\n    this.warns = new WarnManager(this.client, this.options);\n\n    /**\n     * Module Utils\n     * @type {Utils}\n     */\n    this.utils = new Utils(this.client, this.options);\n\n    /**\n     * Module Ready State\n     * @type {boolean}\n     */\n    this.isReady = false;\n\n    if (this.options.storageType === \"json\") this.utils.checkFile();\n\n    this.client.on(\"ready\", async () => {\n      await this.utils.checkMutes();\n    });\n\n    this.client.on(\"guildMemberAdd\", async (member) => {\n      await this.utils.checkMute(member);\n    });\n  }\n\n  /**\n   * Method that Mutes or Temp Mutes Member\n   *\n   * @param {string} type Type of the Mute\n   * @param {Message} message Discord Message\n   * @param {GuildMember} member Member to Mute\n   * @param {string} reason Reason of the Mute\n   * @param {number} time Time of the Temp Mute\n   *\n   * @returns {Promise<MutesData>}\n   * @emits Moderation#muteMember\n   */\n  mute(\n    type: MuteTypes,\n    message: Message,\n    member: GuildMember,\n    reason?: string,\n    time?: number\n  ): Promise<MutesData> {\n    return new Promise(async (res, rej) => {\n      if (![\"mute\", \"tempmute\"].includes(type))\n        throw new ModeratorError(\n          \"INVALID_TYPE\",\n          [\"mute\", \"tempmute\"],\n          type,\n          \"mute#type\"\n        );\n      if (type === \"tempmute\" && time === undefined)\n        throw new ModeratorError(\n          \"UNDEFINED_VALUE\",\n          \"Number\",\n          \"undefined\",\n          \"mute#time\"\n        );\n\n      return res(await this.mutes.create(type, message, member, reason, time));\n    });\n  }\n\n  /**\n   * Method that unmutes Member\n   *\n   * @param {GuildMember} member Member for Mute\n   *\n   * @returns {Promise<MutesData>}\n   * @emits Moderation#unmuteMember\n   */\n  unmute(member: GuildMember): Promise<MutesData> {\n    return new Promise(async (res, rej) => {\n      if (!member)\n        throw new ModeratorError(\n          \"UNDEFINED_VALUE\",\n          \"GuildMember\",\n          \"undefined\",\n          \"unmute#member\"\n        );\n\n      return res(await this.mutes.delete(member));\n    });\n  }\n\n  /**\n   * Method that warns Member\n   *\n   * @param {Message} message Discord Message\n   * @param {GuildMember} member Member for Warn\n   * @param {string} reason Reaon of the Warn\n   *\n   * @fires Moderation#warnAdd\n   * @fires Moderation#warnKick\n   * @returns {Promise<WarnsData>}\n   */\n  warn(\n    message: Message,\n    member: GuildMember,\n    reason?: string\n  ): Promise<WarnsData> {\n    return new Promise(async (res, rej) => {\n      if (!message)\n        throw new ModeratorError(\n          \"UNDEFINED_VALUE\",\n          \"Message\",\n          \"undefined\",\n          \"warn#message\"\n        );\n      if (!member)\n        throw new ModeratorError(\n          \"UNDEFINED_VALUE\",\n          \"GuildMember\",\n          \"undefined\",\n          \"warn#member\"\n        );\n      if (!reason) reason = \"No reason provided.\";\n\n      return res(this.warns.create(message, member, reason));\n    });\n  }\n\n  /**\n   * Method that removes last warn from Member\n   *\n   * @param {GuildMember} member Member for Warn\n   *\n   * @fires Moderation#warnRemove\n   * @returns {Promise<WarnsData>}\n   */\n  unwarn(member: GuildMember): Promise<WarnsData> {\n    return new Promise(async (res, rej) => {\n      if (!member)\n        throw new ModeratorError(\n          \"UNDEFINED_VALUE\",\n          \"GuildMember\",\n          \"undefined\",\n          \"unwarn#member\"\n        );\n\n      return res(await this.warns.delete(member));\n    });\n  }\n\n  /**\n   * Method that removes last warn from Member\n   *\n   * @param {GuildMember} member Member for Warn\n   * @returns {Promise<WarnsData[] | undefined>}\n   */\n  allWarns(member: GuildMember): Promise<WarnsData[] | undefined> {\n    return new Promise(async (res, rej) => {\n      if (!member)\n        throw new ModeratorError(\n          \"UNDEFINED_VALUE\",\n          \"GuildMember\",\n          \"undefined\",\n          \"warns#member\"\n        );\n\n      const warns = await this.warns.all(member);\n      if (warns === null) return res(undefined);\n\n      return res(warns);\n    });\n  }\n}\n"]}