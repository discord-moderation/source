{"version":3,"file":"Moderation.js","sourceRoot":"","sources":["../../src/classes/Moderation.ts"],"names":[],"mappings":";;;;;;AAEA,iCAA6B;AAC7B,mCAA+B;AAI/B,sEAA6C;AAiB7C;;;;;;GAMG;AACH,MAAa,UAAW,SAAQ,WAAI;IAChC;;;;;OAKG;IACH,YAAY,MAAc,EAAE,OAAgB;QACxC,KAAK,EAAE,CAAA;QAEP;;;WAGG;QACH,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QAEpB;;;WAGG;QACH,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QAEtB;;;WAGG;QACH,IAAI,CAAC,KAAK,GAAG,IAAI,aAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAA;QAEjD;;;WAGG;QACH,IAAI,CAAC,OAAO,GAAG,KAAK,CAAA;QAEpB,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,KAAK,MAAM;YAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAA;QAE/D,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;YAC/B,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAA;QACjC,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,gBAAgB,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE;YAC9C,MAAM,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;QACtC,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;;;;;;;;;;OAWG;IACH,IAAI,CACA,IAAe,EACf,OAAgB,EAChB,MAAmB,EACnB,MAAe,EACf,IAAa;QAEb,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;YAClC,IAAI,CAAC,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;gBACpC,MAAM,IAAI,wBAAc,CACpB,cAAc,EACd,CAAC,MAAM,EAAE,UAAU,CAAC,EACpB,IAAI,EACJ,WAAW,CACd,CAAA;YACL,IAAI,IAAI,KAAK,UAAU,IAAI,IAAI,KAAK,SAAS;gBACzC,MAAM,IAAI,wBAAc,CACpB,iBAAiB,EACjB,QAAQ,EACR,WAAW,EACX,WAAW,CACd,CAAA;YAEL,OAAO,GAAG,CACN,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,CAC/D,CAAA;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;;;;;;OAOG;IACH,MAAM,CAAC,MAAmB;QACtB,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;YAClC,OAAO,GAAG,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAA;QAC/C,CAAC,CAAC,CAAA;IACN,CAAC;CACJ;AAnGD,gCAmGC","sourcesContent":["// Imports\nimport { Options } from '../types/Options'\nimport { Base } from './Base'\nimport { Utils } from './Utils'\nimport { MuteManager } from './MuteManager'\nimport { MuteTypes } from '../constants'\nimport { MutesData } from '../types/MuteData'\nimport ModeratorError from './ModeratorError'\n\n// Discord.JS\nimport { Client, GuildMember, Message } from 'discord.js'\n\nexport declare interface Moderation {\n    client: Client\n    options: Options\n\n    // Classes\n    utils: Utils\n    mutes: MuteManager\n\n    // Other\n    isReady: boolean\n}\n\n/**\n * Main Moderation Class\n *\n * @class\n * @classdesc Class that enables Moderation System\n * @extends {Base}\n */\nexport class Moderation extends Base {\n    /**\n     * @param {Client} client - Discord.JS Client\n     * @param {Options} options - Module Options\n     * \n     * @constructor\n     */\n    constructor(client: Client, options: Options) {\n        super()\n\n        /**\n         * Discord Client\n         * @type {Client}\n         */\n        this.client = client\n\n        /**\n         * Module Options\n         * @type {Options}\n         */\n        this.options = options\n\n        /**\n         * Module Utils\n         * @type {Utils}\n         */\n        this.utils = new Utils(this.client, this.options)\n\n        /**\n         * Module Ready State\n         * @type {boolean}\n         */\n        this.isReady = false\n\n        if (this.options.storageType === 'json') this.utils.checkFile()\n\n        this.client.on('ready', async () => {\n            await this.utils.checkMutes()\n        })\n\n        this.client.on('guildMemberAdd', async (member) => {\n            await this.utils.checkMute(member)\n        })\n    }\n\n    /**\n     * Method that Mutes or Temp Mutes Member\n     *\n     * @param {string} type - Type of the Mute\n     * @param {Message} message - Discord Message\n     * @param {GuildMember} member - Member to Mute\n     * @param {string} reason - Reason of the Mute\n     * @param {number} time - Time of the Temp Mute\n     *\n     * @returns {Promise<MutesData>}\n     * @emits Moderation#muteMember\n     */\n    mute(\n        type: MuteTypes,\n        message: Message,\n        member: GuildMember,\n        reason?: string,\n        time?: number\n    ): Promise<MutesData> {\n        return new Promise(async (res, rej) => {\n            if (!['mute', 'tempmute'].includes(type))\n                throw new ModeratorError(\n                    'INVALID_TYPE',\n                    ['mute', 'tempmute'],\n                    type,\n                    'mute#type'\n                )\n            if (type === 'tempmute' && time === undefined)\n                throw new ModeratorError(\n                    'UNDEFINED_VALUE',\n                    'Number',\n                    'undefined',\n                    'mute#time'\n                )\n\n            return res(\n                await this.mutes.create(type, message, member, reason, time)\n            )\n        })\n    }\n\n    /**\n     * Method that unmutes Member\n     *\n     * @param {GuildMember} member - Member to Mute\n     *\n     * @returns {Promise<MutesData>}\n     * @emits Moderation#unmuteMember\n     */\n    unmute(member: GuildMember): Promise<MutesData> {\n        return new Promise(async (res, rej) => {\n            return res(await this.mutes.delete(member))\n        })\n    }\n}\n"]}