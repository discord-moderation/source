{"version":3,"file":"Base.js","sourceRoot":"","sources":["../../src/classes/Base.ts"],"names":[],"mappings":";;;AAAA,mCAAqC;AAGrC,MAAM,OAAO,GAAG,IAAI,qBAAY,EAAE,CAAA;AAElC;;;;;;;GAOG;AACH,MAAa,IAAI;IACb;;;;;;OAMG;IACH,EAAE,CACE,KAAQ,EACR,QAAwC;QAExC,OAAO,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAA;IACtC,CAAC;IAED;;;;;;OAMG;IACH,IAAI,CACA,KAAQ,EACR,QAAwC;QAExC,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAA;IACxC,CAAC;IAED;;;;;;OAMG;IACH,IAAI,CAAyB,KAAQ,EAAE,GAAG,IAAe;QACrD,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;IACpC,CAAC;CACJ;AAvCD,oBAuCC;AAED;;;;;GAKG;AAEH;;;;;;;;;;;GAWG;AAEH;;;;;;;;GAQG;AAEH;;;;;;;;;;GAUG;AAEH;;;;;GAKG","sourcesContent":["import { EventEmitter } from 'events'\nimport { Events } from '../types/Events'\n\nconst emitter = new EventEmitter()\n\n/**\n * Base class that uses in all other classes.\n *\n * @class\n * @classdesc Base class that uses in all other classes.\n *\n * @private\n */\nexport class Base {\n    /**\n     * Handles all the Events\n     *\n     * @param {String} event Event Name\n     * @param {Function} fn Callback\n     * @returns {EventEmitter}\n     */\n    on<K extends keyof Events>(\n        event: K,\n        listener: (...args: Events[K][]) => void\n    ): EventEmitter {\n        return emitter.on(event, listener)\n    }\n\n    /**\n     * Handles all the Events\n     *\n     * @param {String} event Event Name\n     * @param {Function} fn Callback\n     * @returns {EventEmitter}\n     */\n    once<K extends keyof Events>(\n        event: K,\n        listener: (...args: Events[K][]) => void\n    ): EventEmitter {\n        return emitter.once(event, listener)\n    }\n\n    /**\n     * Emits any Event\n     *\n     * @param {String} event Event Name\n     * @param {Function} fn Callback\n     * @returns {boolean}\n     */\n    emit<K extends keyof Events>(event: K, ...args: Events[K]): boolean {\n        return emitter.emit(event, args)\n    }\n}\n\n/**\n * Module Options\n * @typedef {Object} Options\n * @prop {string} storageType - Storage Type (Json or SQLite)\n * @prop {string} storagePath - Storage Path (Only for Json type)\n */\n\n/**\n * Mute Data\n * @typedef {Object} MutesData\n * @prop {number} id - ID of the Mute\n * @prop {string} type - Type of the Mute\n * @prop {string} guildID - Guild ID\n * @prop {string} memberID - Member ID\n * @prop {string} moderatorID - Moderator ID\n * @prop {string} channelID - Channel ID\n * @prop {number} time - Mute Time\n * @prop {number} unmutedAt - Time when Member will be Unmuted\n */\n\n/**\n * Guild Data\n * @typedef {Object} GuildData\n * @prop {string} guildID - Guild ID\n * @prop {null | string} muteRole - Mute Role ID\n * @prop {Array<WarnsData>} warns - Guild Warns\n * @prop {Array<MutesData>} mutes - Guild Mutes\n * @prop {Array<ImmunityUsersData>} ImmunityUsersData - Users with Immunity\n */\n\n/**\n * Warn Data\n * @typedef {Object} WarnsData\n * @prop {number} id - ID of the Warn\n * @prop {string} guildID - Guild ID\n * @prop {string} memberID - Member ID\n * @prop {string} moderatorID - Moderator ID\n * @prop {string} channelID - Channel ID\n * @prop {number | null} warns - Warns Length\n * @prop {string} reason - Warn Reason\n */\n\n/**\n * Immunity Users Data\n * @typedef {Object} ImmunityUsersData\n * @prop {boolean} status - Status of Immunity\n * @prop {string} memberID - Member ID\n */\n"]}