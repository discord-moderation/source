{"version":3,"file":"MuteManager.js","sourceRoot":"","sources":["../../src/classes/MuteManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Options } from '../types/Options'\nimport { GuildData } from '../types/GuildData'\nimport { MutesData } from '../types/MuteData'\nimport { Client, Guild, GuildMember, Message, Role } from 'discord.js'\nimport { Base } from './Base'\nimport { Utils } from './Utils'\nimport { Logger } from './Logger'\nimport { MuteTypes } from '../constants'\n\n// Storage Imports\nimport db from 'quick.db'\nimport fs from 'fs'\n\nexport declare interface MuteManager {\n    client: Client\n    options: Options\n    logger: Logger\n    utils: Utils\n}\n\n/**\n * MuteManager Class\n *\n * @class\n * @classdesc Class that Handles/Creates Mutes\n * @extends {Base}\n */\nexport class MuteManager extends Base {\n    constructor(client: Client, options: Options) {\n        super()\n        /**\n         * Discord Client\n         * @type {Client}\n         */\n        this.client = client\n        /**\n         * Module Options\n         * @type {Options}\n         */\n        this.options = options\n        /**\n         * Module Logger\n         * @type {Logger}\n         */\n        this.logger = new Logger()\n        /**\n         * Module Utils\n         * @type {Utils}\n         */\n        this.utils = new Utils(this.client, this.options)\n    }\n\n    /**\n     * This method sets Mute Role.\n     *\n     * @param {Guild} guild - Discord Guild\n     * @param {Role} role - Discord Role\n     * @returns {Promise<boolean>}\n     */\n    setRole(guild: Guild, role: Role): Promise<boolean> {\n        return new Promise(async (res, _rej) => {\n            if (!role)\n                return this.logger.error(\n                    'Specify \"Role\" in MuteManager#setRole'\n                )\n\n            switch (this.options.storageType) {\n                case 'sqlite': {\n                    await this.utils.getGuild(guild)\n\n                    db.set(`guild.${guild.id}.muteRole`, role.id)\n\n                    return res(true)\n                }\n\n                case 'json': {\n                    const data = await this.utils.getGuild(guild)\n                    data.muteRole = role.id\n\n                    const file = JSON.parse(\n                        fs.readFileSync(this.options.storagePath).toString()\n                    )\n                    fs.writeFileSync(\n                        this.options.storagePath,\n                        JSON.stringify(file, null, '\\t')\n                    )\n\n                    return res(true)\n                }\n            }\n        })\n    }\n\n    /**\n     * This method getting Mute Role.\n     *\n     * @param {Guild} guild - Discord Guild\n     * @returns {Promise<boolean>}\n     */\n    getRole(guild: Guild): Promise<null | Role> {\n        return new Promise(async (res, rej) => {\n            if (!guild)\n                return rej(\n                    this.logger.warn('Specify \"Guild\" in MuteManager#getRole')\n                )\n\n            switch (this.options.storageType) {\n                case 'sqlite': {\n                    const data = await this.utils.getGuild(guild)\n                    if (data.muteRole === null) return res(null)\n\n                    const role = guild.roles.cache.get(data.muteRole)\n                    if (!role) return res(null)\n\n                    return res(role)\n                }\n\n                case 'json': {\n                    const data = await this.utils.getGuild(guild)\n                    if (data.muteRole === null) return res(null)\n\n                    const role = guild.roles.cache.get(data.muteRole)\n                    if (!role) return res(null)\n\n                    return res(role)\n                }\n            }\n        })\n    }\n\n    /**\n     * Method that finds Mute in Storage\n     *\n     * @param {GuildMember} member - Discord Member\n     *\n     * @returns {Promise<MutesData>}\n     */\n    getMute(member: GuildMember): Promise<MutesData | null> {\n        return new Promise(async (res, rej) => {\n            if (!member)\n                return this.logger.error(\n                    'Specify \"GuildMember\" in MuteManager#getMute'\n                )\n\n            const data = await this.utils.getGuild(member.guild)\n            const mute = data.mutes.find((x) => x.memberID === member.id)\n\n            if (mute) return res(mute)\n            else return res(null)\n        })\n    }\n\n    /**\n     * This is method that mutes member.\n     *\n     * @param {string} type - Mute Type\n     * @param {Message} message - Message\n     * @param {GuildMember} member - Discord Guild Member\n     * @param {string} reason - Reason of the Mute\n     * @param {number} time - Time of Temp Mute\n     *\n     * @returns {Promise<MutesData>}\n     */\n    create(\n        type: MuteTypes,\n        message: Message,\n        member: GuildMember,\n        reason?: string,\n        time?: number\n    ): Promise<MutesData> {\n        return new Promise(async (res, rej) => {\n            if (!type)\n                return this.logger.warn('Specify \"type\" in MuteManager#create')\n            if (!message)\n                return this.logger.warn(\n                    'Specify \"message\" in MuteManager#create'\n                )\n            if (!member)\n                return this.logger.warn(\n                    'Specify \"member\" in MuteManager#create'\n                )\n\n            if (!reason) reason = 'No reason provided.'\n\n            if (type === 'tempmute' && time === undefined)\n                return this.logger.warn(\n                    'No \"time\" specified in MuteManager#create (tempmute)'\n                )\n\n            const mute = await this.getMute(member)\n            if (mute !== null)\n                return this.logger.error('Member already has Mute!')\n\n            switch (this.options.storageType) {\n                case 'sqlite': {\n                    if (message.guild === null) return\n\n                    const data = await this.utils.getGuild(message.guild)\n                    const role = await this.getRole(message.guild)\n\n                    if (role === null) return\n                    if (time === undefined) return\n\n                    var muteData: MutesData = {\n                        id: data.mutes.length + 1,\n                        type,\n                        guildID: message.guild.id,\n                        memberID: member.id,\n                        moderatorID: message.author.id,\n                        channelID: message.channel.id,\n                        reason,\n                    }\n\n                    if (type === 'tempmute') {\n                        muteData = {\n                            ...muteData,\n                            time,\n                            unmutedAt: Date.now() + time,\n                        }\n                    }\n\n                    await member.roles.add(role).catch((err) => {\n                        return rej(this.logger.error(err.message))\n                    })\n\n                    if (type === 'tempmute')\n                        await this.handleMute(\n                            message.guild,\n                            member,\n                            time,\n                            muteData\n                        )\n\n                    data.mutes.push(muteData)\n                    db.set(`guild.${message.guild.id}`, data)\n\n                    this.emit('muteMember', muteData)\n                    return res(muteData)\n                }\n\n                case 'json': {\n                    if (message.guild === null) return\n\n                    const data = await this.utils.getGuild(message.guild)\n                    const role = await this.getRole(message.guild)\n\n                    if (role === null) return\n                    if (time === undefined) return\n\n                    var muteData: MutesData = {\n                        id: data.mutes.length + 1,\n                        type,\n                        guildID: message.guild.id,\n                        memberID: member.id,\n                        moderatorID: message.author.id,\n                        channelID: message.channel.id,\n                        reason,\n                    }\n\n                    if (type === 'tempmute') {\n                        muteData = {\n                            ...muteData,\n                            time,\n                            unmutedAt: Date.now() + time,\n                        }\n                    }\n\n                    await member.roles.add(role).catch((err) => {\n                        return rej(this.logger.error(err.message))\n                    })\n\n                    if (type === 'tempmute')\n                        await this.handleMute(\n                            message.guild,\n                            member,\n                            time,\n                            muteData\n                        )\n\n                    const file: GuildData = JSON.parse(\n                        fs.readFileSync(this.options.storagePath).toString()\n                    )\n                    file.mutes.push(muteData)\n\n                    fs.writeFileSync(\n                        this.options.storagePath,\n                        JSON.stringify(file, null, '\\t')\n                    )\n\n                    this.emit('muteMember', muteData)\n                    return res(muteData)\n                }\n            }\n        })\n    }\n\n    /**\n     * Method that removes Mute from Member\n     *\n     * @param {Message} message - Discord Message\n     * @param {GuildMember} member - Discord Member\n     *\n     * @fires Moderation#unmuteMember\n     * @returns {Promise<MutesData>}\n     */\n    delete(member: GuildMember): Promise<MutesData> {\n        return new Promise(async (res, rej) => {\n            const mute = await this.getMute(member)\n\n            if (mute === null)\n                return this.logger.error(\"Member hasn't any Mute!\")\n            else {\n                const data = await this.utils.getGuild(member.guild)\n                const role = await this.getRole(member.guild)\n\n                if (!role)\n                    return this.logger.error(\"Server hasn't any Mute Role!\")\n\n                const roleCheck = member.roles.cache.find(\n                    (r) => r.id === role.id\n                )\n                if (!roleCheck)\n                    return this.logger.error(\"Member haven't Mute Role!\")\n\n                await member.roles.remove(role).catch((err) => {\n                    return this.logger.error(err)\n                })\n\n                data.mutes.filter((muteData) => muteData.memberID !== member.id)\n\n                this.utils.setData(member.guild, data)\n\n                this.emit('unmuteMember', {\n                    id: mute.id,\n                    type: mute.type,\n                    guildID: member.guild.id,\n                    memberID: member.id,\n                    moderatorID: mute.moderatorID,\n                    channelID: mute.channelID,\n                    reason: mute.reason,\n                    time: mute.time !== undefined ? mute.time : undefined,\n                })\n\n                return mute\n            }\n        })\n    }\n\n    /**\n     * Private method that will handle Mute\n     *\n     * @param {Guild} guild - Discord Guild\n     * @param {GuildMember} member - Guild Member\n     * @param {number} time - Time of the Mute\n     * @param {MutesData} muteData - Mute Data\n     * @returns {Promise<null | boolean>}\n     *\n     * @emits Moderation#unmuteMember\n     */\n    handleUtilsMute(member: GuildMember): Promise<boolean> {\n        return new Promise(async (res, rej) => {\n            const data = await this.utils.getGuild(member.guild)\n            if (data.muteRole === null) return res(false)\n\n            const lastMute = data.mutes.find(\n                (mute) => mute.memberID === member.id\n            )\n            if (lastMute?.channelID === undefined) return res(false)\n\n            const role = await this.getRole(member.guild)\n            if (!role) return res(false)\n\n            if (this.client?.user?.id === undefined) return res(false)\n\n            const muteData: MutesData = {\n                id: data.mutes.length + 1,\n                type: 'mute',\n                guildID: member.guild.id,\n                memberID: member.id,\n                moderatorID: this.client.user.id,\n                channelID: lastMute.channelID,\n                reason: 'User rejoined server.',\n            }\n\n            await member.roles.add(role).catch((err) => {\n                return rej(this.logger.error(err.message))\n            })\n\n            this.emit('muteMember', muteData)\n\n            return res(true)\n        })\n    }\n\n    /**\n     * Private method that will handle Mute\n     *\n     * @param {Guild} guild - Discord Guild\n     * @param {GuildMember} member - Guild Member\n     * @param {number} time - Time of the Mute\n     * @param {MutesData} muteData - Mute Data\n     * @returns {Promise<null | boolean>}\n     *\n     * @emits Moderation#unmuteMember\n     */\n    private handleMute(\n        guild: Guild,\n        member: GuildMember,\n        time: number,\n        muteData: MutesData\n    ): Promise<null | boolean> {\n        return new Promise(async (res, rej) => {\n            const data = await this.utils.getGuild(guild)\n            if (data.muteRole === null) return res(null)\n\n            const role = guild.roles.cache.get(data.muteRole)\n            if (!role) return res(null)\n\n            setTimeout(async () => {\n                await member.roles.add(role).catch((err) => {\n                    return rej(this.logger.error(err.message))\n                })\n\n                this.emit('unmuteMember', muteData)\n\n                return res(true)\n            }, time)\n        })\n    }\n}\n"]}