{"version":3,"file":"MuteManager.js","sourceRoot":"","sources":["../../src/classes/MuteManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Options, GuildData, MuteTypes, MutesData } from \"../constants\";\nimport { Client, Guild, GuildMember, Message, Role } from \"discord.js\";\nimport { Base } from \"./Base\";\nimport { Utils } from \"./Utils\";\nimport { Logger } from \"./Logger\";\n\n// Storage Imports\nimport db from \"quick.db\";\nimport fs from \"fs\";\n\nexport declare interface MuteManager {\n  client: Client;\n  options: Options;\n\n  logger: Logger;\n  utils: Utils;\n}\n\n/**\n * MuteManager Class\n *\n * @class\n * @classdesc Class that Handles/Creates/Removes Mutes\n * @extends {Base}\n */\nexport class MuteManager extends Base {\n  /**\n   *\n   * @param {Client} client Discord.JS Client\n   * @param {Options} options Module Options\n   *\n   * @constructor\n   */\n  constructor(client: Client, options: Options) {\n    super();\n    /**\n     * Discord Client\n     * @type {Client}\n     */\n    this.client = client;\n\n    /**\n     * Module Options\n     * @type {Options}\n     */\n    this.options = options;\n\n    /**\n     * Module Logger\n     * @type {Logger}\n     */\n    this.logger = new Logger();\n\n    /**\n     * Module Utils\n     * @type {Utils}\n     */\n    this.utils = new Utils(this.client, this.options);\n  }\n\n  /**\n   * This method sets Mute Role.\n   *\n   * @param {Guild} guild Discord Guild\n   * @param {Role} role Discord Role\n   * @returns {Promise<boolean>}\n   */\n  setRole(guild: Guild, role: Role): Promise<boolean> {\n    return new Promise(async (res, _rej) => {\n      if (!role)\n        return this.logger.error('Specify \"Role\" in MuteManager#setRole');\n\n      switch (this.options.storageType) {\n        case \"sqlite\": {\n          await this.utils.getGuild(guild);\n\n          db.set(`guild.${guild.id}.muteRole`, role.id);\n\n          return res(true);\n        }\n\n        case \"json\": {\n          const data = await this.utils.getGuild(guild);\n          data.muteRole = role.id;\n\n          const file = JSON.parse(\n            fs.readFileSync(this.options.storagePath).toString()\n          );\n          fs.writeFileSync(\n            this.options.storagePath,\n            JSON.stringify(file, null, \"\\t\")\n          );\n\n          return res(true);\n        }\n      }\n    });\n  }\n\n  /**\n   * This method getting Mute Role.\n   *\n   * @param {Guild} guild Discord Guild\n   * @returns {Promise<boolean>}\n   */\n  getRole(guild: Guild): Promise<null | Role> {\n    return new Promise(async (res, rej) => {\n      if (!guild)\n        return rej(this.logger.warn('Specify \"Guild\" in MuteManager#getRole'));\n\n      switch (this.options.storageType) {\n        case \"sqlite\": {\n          const data = await this.utils.getGuild(guild);\n          if (data.muteRole === null) return res(null);\n\n          const role = guild.roles.cache.get(data.muteRole);\n          if (!role) return res(null);\n\n          return res(role);\n        }\n\n        case \"json\": {\n          const data = await this.utils.getGuild(guild);\n          if (data.muteRole === null) return res(null);\n\n          const role = guild.roles.cache.get(data.muteRole);\n          if (!role) return res(null);\n\n          return res(role);\n        }\n      }\n    });\n  }\n\n  /**\n   * Method that finds Mute in Storage\n   *\n   * @param {GuildMember} member Discord Member\n   * @returns {Promise<MutesData>}\n   */\n  getMute(member: GuildMember): Promise<MutesData | null> {\n    return new Promise(async (res, rej) => {\n      if (!member)\n        return this.logger.error(\n          'Specify \"GuildMember\" in MuteManager#getMute'\n        );\n\n      const data = await this.utils.getGuild(member.guild);\n      const mute = data.mutes.find((x) => x.memberID === member.id);\n\n      if (mute) return res(mute);\n      else return res(null);\n    });\n  }\n\n  /**\n   * This is method that mutes member.\n   *\n   * @param {string} type Mute Type\n   * @param {Message} message Message\n   * @param {GuildMember} member Discord Guild Member\n   * @param {string} reason Reason of the Mute\n   * @param {number} time Time of Temp Mute\n   *\n   * @returns {Promise<MutesData>}\n   */\n  create(\n    type: MuteTypes,\n    message: Message,\n    member: GuildMember,\n    reason?: string,\n    time?: number\n  ): Promise<MutesData> {\n    return new Promise(async (res, rej) => {\n      if (!type)\n        return this.logger.warn('Specify \"type\" in MuteManager#create');\n      if (!message)\n        return this.logger.warn('Specify \"message\" in MuteManager#create');\n      if (!member)\n        return this.logger.warn('Specify \"member\" in MuteManager#create');\n\n      if (!reason) reason = \"No reason provided.\";\n\n      if (type === \"tempmute\" && time === undefined)\n        return this.logger.warn(\n          'No \"time\" specified in MuteManager#create (tempmute)'\n        );\n\n      const mute = await this.getMute(member);\n      if (mute !== null) return this.logger.error(\"Member already has Mute!\");\n\n      switch (this.options.storageType) {\n        case \"sqlite\": {\n          if (message.guild === null) return;\n\n          const data = await this.utils.getGuild(message.guild);\n          const role = await this.getRole(message.guild);\n\n          if (role === null) return;\n          if (time === undefined) return;\n\n          var muteData: MutesData = {\n            id: data.mutes.length + 1,\n            type,\n            guildID: message.guild.id,\n            memberID: member.id,\n            moderatorID: message.author.id,\n            channelID: message.channel.id,\n            reason,\n          };\n\n          if (type === \"tempmute\") {\n            muteData = {\n              ...muteData,\n              time,\n              unmutedAt: Date.now() + time,\n            };\n          }\n\n          await member.roles.add(role).catch((err) => {\n            return rej(this.logger.error(err.message));\n          });\n\n          if (type === \"tempmute\")\n            await this.handleMute(message.guild, member, time, muteData);\n\n          data.mutes.push(muteData);\n          db.set(`guild.${message.guild.id}`, data);\n\n          this.emit(\"muteMember\", muteData);\n          return res(muteData);\n        }\n\n        case \"json\": {\n          if (message.guild === null) return;\n\n          const data = await this.utils.getGuild(message.guild);\n          const role = await this.getRole(message.guild);\n\n          if (role === null) return;\n          if (time === undefined) return;\n\n          var muteData: MutesData = {\n            id: data.mutes.length + 1,\n            type,\n            guildID: message.guild.id,\n            memberID: member.id,\n            moderatorID: message.author.id,\n            channelID: message.channel.id,\n            reason,\n          };\n\n          if (type === \"tempmute\") {\n            muteData = {\n              ...muteData,\n              time,\n              unmutedAt: Date.now() + time,\n            };\n          }\n\n          await member.roles.add(role).catch((err) => {\n            return rej(this.logger.error(err.message));\n          });\n\n          if (type === \"tempmute\")\n            await this.handleMute(message.guild, member, time, muteData);\n\n          const file: GuildData = JSON.parse(\n            fs.readFileSync(this.options.storagePath).toString()\n          );\n          file.mutes.push(muteData);\n\n          fs.writeFileSync(\n            this.options.storagePath,\n            JSON.stringify(file, null, \"\\t\")\n          );\n\n          this.emit(\"muteMember\", muteData);\n          return res(muteData);\n        }\n      }\n    });\n  }\n\n  /**\n   * Method that removes Mute from Member\n   *\n   * @param {Message} message Discord Message\n   * @param {GuildMember} member Discord Member\n   *\n   * @fires Moderation#unmuteMember\n   * @returns {Promise<MutesData>}\n   */\n  delete(member: GuildMember): Promise<MutesData> {\n    return new Promise(async (res, rej) => {\n      const mute = await this.getMute(member);\n\n      if (mute === null) return this.logger.error(\"Member hasn't any Mute!\");\n      else {\n        const data = await this.utils.getGuild(member.guild);\n        const role = await this.getRole(member.guild);\n\n        if (!role) return this.logger.error(\"Server hasn't any Mute Role!\");\n\n        const roleCheck = member.roles.cache.find((r) => r.id === role.id);\n        if (!roleCheck) return this.logger.error(\"Member haven't Mute Role!\");\n\n        await member.roles.remove(role).catch((err) => {\n          return this.logger.error(err);\n        });\n\n        data.mutes.filter((muteData) => muteData.memberID !== member.id);\n\n        this.utils.setData(member.guild, data);\n\n        this.emit(\"unmuteMember\", {\n          id: mute.id,\n          type: mute.type,\n          guildID: member.guild.id,\n          memberID: member.id,\n          moderatorID: mute.moderatorID,\n          channelID: mute.channelID,\n          reason: mute.reason,\n          time: mute.time !== undefined ? mute.time : undefined,\n        });\n\n        return mute;\n      }\n    });\n  }\n\n  /**\n   * Private method that will handle Mute\n   *\n   * @param {Guild} guild Discord Guild\n   * @param {GuildMember} member Guild Member\n   * @param {number} time Time of the Mute\n   * @param {MutesData} muteData Mute Data\n   * @returns {Promise<null | boolean>}\n   *\n   * @emits Moderation#muteMember\n   */\n  handleUtilsMute(member: GuildMember): Promise<boolean> {\n    return new Promise(async (res, rej) => {\n      const data = await this.utils.getGuild(member.guild);\n      if (data.muteRole === null) return res(false);\n\n      const lastMute = await this.getMute(member);\n      if (lastMute?.channelID === undefined) return res(false);\n\n      const role = await this.getRole(member.guild);\n      if (!role) return res(false);\n\n      if (this.client?.user?.id === undefined) return res(false);\n\n      const muteData: MutesData = {\n        id: data.mutes.length + 1,\n        type: \"mute\",\n        guildID: member.guild.id,\n        memberID: member.id,\n        moderatorID: this.client.user.id,\n        channelID: lastMute.channelID,\n        reason: \"User rejoined server.\",\n      };\n\n      await member.roles.add(role).catch((err) => {\n        return rej(this.logger.error(err.message));\n      });\n\n      this.emit(\"muteMember\", muteData);\n\n      return res(true);\n    });\n  }\n\n  /**\n   * Private method that will handle Mute\n   *\n   * @param {Guild} guild Discord Guild\n   * @param {GuildMember} member Guild Member\n   * @param {number} time Time of the Mute\n   * @param {MutesData} muteData Mute Data\n   * @returns {Promise<null | boolean>}\n   *\n   * @emits Moderation#unmuteMember\n   */\n  private handleMute(\n    guild: Guild,\n    member: GuildMember,\n    time: number,\n    muteData: MutesData\n  ): Promise<null | boolean> {\n    return new Promise(async (res, rej) => {\n      const data = await this.utils.getGuild(guild);\n      if (data.muteRole === null) return res(null);\n\n      const role = guild.roles.cache.get(data.muteRole);\n      if (!role) return res(null);\n\n      setTimeout(async () => {\n        await member.roles.add(role).catch((err) => {\n          return rej(this.logger.error(err.message));\n        });\n\n        data.mutes.filter((m) => m.memberID !== member.id);\n        await this.utils.setData(guild, data);\n\n        this.emit(\"unmuteMember\", muteData);\n\n        return res(true);\n      }, time);\n    });\n  }\n}\n"]}